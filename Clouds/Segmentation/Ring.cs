using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Mars.Clouds.Segmentation
{
    internal class Ring
    {
        public static readonly ReadOnlyCollection<Ring> Rings;

        public int[] XIndices { get; private set; }
        public int[] YIndices { get; private set; }

        static Ring()
        {
            /* generating R code
               library(dplyr)
               library(tidyr)
               library(writexl)
               distance = crossing(x = seq(-10, 10), y = seq(-10, 10)) %>% 
                 mutate(distance = sqrt(x^2 + y^2),
                        ring = round(distance, 0)) %>%
                 filter(distance < 10.5) %>%
                 relocate(ring)
               write_xlsx(distance %>% arrange(ring, y, x), "rings.xlsx")
             */
            Ring.Rings = new List<Ring>()
            {
                new([ -1, 0, 1, -1, 1, -1, 0, 1 ], [ -1, -1, -1, 0, 0, 1, 1, 1 ]), // radius 1
                new([ -1, 0, 1, -2, 2, -2, 2, -2, 2, -1, 0, 1 ], [ -2, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2 ]), // radius 2
                new([ -1, 0, 1, -2, 2, -3, 3, -3, 3, -3, 3, -2, 2, -1, 0, 1 ], [ -3, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 3 ]), // radius 3
                new([ -2, -1, 0, 1, 2, -3, -2, 2, 3, -4, -3, 3, 4, -4, 4, -4, 4, -4, 4, -4, -3, 3, 4, -3, -2, 2, 3, -2, -1, 0, 1, 2 ], [ -4, -4, -4, -4, -4, -3, -3, -3, -3, -2, -2, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4 ]), // radius 4
                new([ -2, -1, 0, 1, 2, -3, 3, -4, 4, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -4, 4, -3, 3, -2, -1, 0, 1, 2 ], [ -5, -5, -5, -5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5 ]), // radius 5
                new([ -2, -1, 0, 1, 2, -4, -3, 3, 4, -5, -4, 4, 5, -5, 5, -6, 6, -6, 6, -6, 6, -6, 6, -6, 6, -5, 5, -5, -4, 4, 5, -4, -3, 3, 4, -2, -1, 0, 1, 2 ], [ -6, -6, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6 ]), // radius 6
                new([ -2, -1, 0, 1, 2, -4, -3, 3, 4, -5, 5, -6, 6, -6, 6, -7, 7, -7, 7, -7, 7, -7, 7, -7, 7, -6, 6, -6, 6, -5, 5, -4, -3, 3, 4, -2, -1, 0, 1, 2 ], [ -7, -7, -7, -7, -7, -6, -6, -6, -6, -5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7 ]), // radius 7
                new([ -2, -1, 0, 1, 2, -4, -3, 3, 4, -6, -5, 5, 6, -6, 6, -7, 7, -7, 7, -8, 8, -8, 8, -8, 8, -8, 8, -8, 8, -7, 7, -7, 7, -6, 6, -6, -5, 5, 6, -4, -3, 3, 4, -2, -1, 0, 1, 2 ], [ -8, -8, -8, -8, -8, -7, -7, -7, -7, -6, -6, -6, -6, -5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8 ]), // 8
                new([ -3, -2, -1, 0, 1, 2, 3, -5, -4, -3, 3, 4, 5, -6, -5, 5, 6, -7, 7, -8, -7, 7, 8, -8, 8, -9, -8, 8, 9, -9, 9, -9, 9, -9, 9, -9, 9, -9, 9, -9, -8, 8, 9, -8, 8, -8, -7, 7, 8, -7, 7, -6, -5, 5, 6, -5, -4, -3, 3, 4, 5, -3, -2, -1, 0, 1, 2, 3 ], [ -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -6, -6, -5, -5, -5, -5, -4, -4, -3, -3, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9 ]), // 9
                new([ -3, -2, -1, 0, 1, 2, 3, -5, -4, 4, 5, -6, 6, -7, 7, -8, 8, -9, 9, -9, 9, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -9, 9, -9, 9, -8, 8, -7, 7, -6, 6, -5, -4, 4, 5, -3, -2, -1, 0, 1, 2, 3 ], [ -10, -10, -10, -10, -10, -10, -10, -9, -9, -9, -9, -8, -8, -7, -7, -6, -6, -5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10 ]), // 10
            }.AsReadOnly();
        }

        public Ring(int[] xIndices, int[] yIndices)
        {
            if (xIndices.Length != yIndices.Length)
            {
                throw new ArgumentOutOfRangeException(nameof(yIndices), "X index sets must match. X indices are of length " + xIndices.Length + " but y indices are of length " + yIndices.Length + ".");
            }

            this.XIndices = xIndices;
            this.YIndices = yIndices;
        }

        public int Count
        {
            get { return this.XIndices.Length; }
        }
    }
}
